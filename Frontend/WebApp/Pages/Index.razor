@inject HttpClient client

@page "/"

<PageTitle>Hauptmenü - Inventar App</PageTitle>

<MudContainer Fixed="true" Class="pt-4">
    <MudToolBar Class="pa-0">
        <MudStack>
            <MudAutocomplete @bind-Value="value"
                             SearchFunc="Search"
                             Variant="Variant.Outlined"
                             Label="Suche"
                             AdornmentIcon="@Icons.Material.Outlined.Search" />
        </MudStack>
        <MudSpacer />
        <MudButtonGroup Variant="Variant.Text">
            <MudIconButton Icon="@Icons.Material.Outlined.FiberNew" />
            <MudIconButton Icon="@Icons.Material.Outlined.Add" />
            <MudIconButton Icon="@Icons.Material.Outlined.Remove" />
            <MudIconButton Icon="@Icons.Material.Outlined.Autorenew" />
        </MudButtonGroup>
    </MudToolBar>
    <br />
    <MudTable @ref="mudTable" 
              T="ItemDTO" 
              Items="@ItemDTOs" 
              MultiSelection="true" 
              SelectionChangeable="true"
              Hover="true"
              @bind-SelectedItems="selectedItems" 
              SelectOnRowClick="true">
        <HeaderContent>
            <MudTh>Raum</MudTh>
            <MudTh>Schrank</MudTh>
            <MudTh>Gegenstand</MudTh>
            <MudTh>Menge</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Raum">@context.RoomName</MudTd>
            <MudTd DataLabel="Schrank">@context.ShelfName</MudTd>
            <MudTd DataLabel="Gegenstand">@context.ItemName</MudTd>
            <MudTd DataLabel="Menge">@context.ItemAmount</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private string value { get; set; }
    private MudTable<ItemDTO> mudTable;
    private List<ItemDTO>? ItemDTOs;
    private HashSet<ItemDTO> selectedItems;

    protected override async Task OnInitializedAsync()
    {
        ItemDTOs = new();
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return ItemDTOs
                .Select(i => i.ItemName)
                .ToList();

        return ItemDTOs
            .Where(i => i.ItemName.Contains(value, StringComparison.InvariantCultureIgnoreCase) 
                     || i.ShelfName.Contains(value, StringComparison.InvariantCultureIgnoreCase) 
                     || i.RoomName.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(i => i.RoomName + " | " + i.ShelfName + " | " + i.ItemName)
            .ToList();
    }
}
